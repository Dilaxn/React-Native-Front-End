{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/dilaxn/Desktop/untitled folder/React-Native-Front-End/src/screens/LoginScreen.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Text } from 'react-native-paper';\nimport Background from \"../components/Background\";\nimport Logo from \"../components/Logo\";\nimport Header from \"../components/Header\";\nimport Button from \"../components/Button\";\nimport TextInput from \"../components/TextInput\";\nimport BackButton from \"../components/BackButton\";\nimport { theme } from \"../core/theme\";\nimport { emailValidator } from \"../helpers/emailValidator\";\nimport { passwordValidator } from \"../helpers/passwordValidator\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport axios from \"axios\";\nexport default function LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState({\n    value: '',\n    error: ''\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var _useState3 = useState({\n    value: '',\n    error: ''\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      passwordX = _useState4[0],\n      setPasswordX = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      check = _useState6[0],\n      setCheck = _useState6[1];\n\n  var onLoginPressed = function onLoginPressed() {\n    var user_name, password;\n    return _regeneratorRuntime.async(function onLoginPressed$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            user_name = email.value;\n            password = passwordX.value;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(fetch(\"http://localhost:3001/users/login\", {\n              method: 'POST',\n              body: JSON.stringify({\n                user_name: user_name,\n                password: password\n              }),\n              headers: {\n                'content-type': 'application/json'\n              }\n            }).then(function (response) {\n              return response;\n            }).then(function (response) {\n              return response.json();\n            }).then(function (_ref2) {\n              var user = _ref2.user,\n                  token = _ref2.token;\n              console.log(token);\n              setTimeout(function () {\n                localStorage.setItem('id_token', token);\n              });\n\n              if (token) {\n                navigation.reset({\n                  index: 0,\n                  routes: [{\n                    name: 'Dashboard'\n                  }]\n                });\n              } else {\n                Alert.alert(\"Invalid Credentials\");\n                navigation.reset({\n                  index: 0,\n                  routes: [{\n                    name: 'LoginScreen'\n                  }]\n                });\n              }\n            }).catch(function (error) {\n              console.log(error);\n            }));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(Background, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, React.createElement(BackButton, {\n    goBack: navigation.goBack,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }), React.createElement(Logo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }), React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }, \"Welcome back.\"), React.createElement(TextInput, {\n    label: \"Email\",\n    returnKeyType: \"next\",\n    value: email.value,\n    onChangeText: function onChangeText(text) {\n      return setEmail({\n        value: text,\n        error: ''\n      });\n    },\n    autoCapitalize: \"none\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }), React.createElement(TextInput, {\n    label: \"Password\",\n    returnKeyType: \"done\",\n    value: passwordX.value,\n    onChangeText: function onChangeText(text) {\n      return setPasswordX({\n        value: text,\n        error: ''\n      });\n    },\n    secureTextEntry: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  }), React.createElement(View, {\n    style: styles.forgotPassword,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }, React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return navigation.navigate('ResetPasswordScreen');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 17\n    }\n  }, React.createElement(Text, {\n    style: styles.forgot,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 21\n    }\n  }, \"Forgot your password?\"))), React.createElement(Button, {\n    mode: \"contained\",\n    onPress: onLoginPressed,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }, \"Login\"), React.createElement(View, {\n    style: styles.row,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 17\n    }\n  }, \"Are you a new user? \"), React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return navigation.replace('ResetPasswordScreen');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 17\n    }\n  }, React.createElement(Text, {\n    style: styles.link,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 21\n    }\n  }, \"New User\"))));\n}\nvar styles = StyleSheet.create({\n  forgotPassword: {\n    width: '100%',\n    alignItems: 'flex-end',\n    marginBottom: 24\n  },\n  row: {\n    flexDirection: 'row',\n    marginTop: 4\n  },\n  forgot: {\n    fontSize: 13,\n    color: theme.colors.secondary\n  },\n  link: {\n    fontWeight: 'bold',\n    color: theme.colors.primary\n  }\n});","map":{"version":3,"sources":["/Users/dilaxn/Desktop/untitled folder/React-Native-Front-End/src/screens/LoginScreen.js"],"names":["React","useState","Text","Background","Logo","Header","Button","TextInput","BackButton","theme","emailValidator","passwordValidator","axios","LoginScreen","navigation","value","error","email","setEmail","passwordX","setPasswordX","check","setCheck","onLoginPressed","user_name","password","fetch","method","body","JSON","stringify","headers","then","response","json","user","token","console","log","setTimeout","localStorage","setItem","reset","index","routes","name","Alert","alert","catch","goBack","text","styles","forgotPassword","navigate","forgot","row","replace","link","StyleSheet","create","width","alignItems","marginBottom","flexDirection","marginTop","fontSize","color","colors","secondary","fontWeight","primary"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\nimport {TouchableOpacity, StyleSheet, View} from 'react-native'\nimport {Text} from 'react-native-paper'\nimport Background from '../components/Background'\nimport Logo from '../components/Logo'\nimport Header from '../components/Header'\nimport Button from '../components/Button'\nimport TextInput from '../components/TextInput'\nimport BackButton from '../components/BackButton'\nimport {theme} from '../core/theme'\nimport {emailValidator} from '../helpers/emailValidator'\nimport {passwordValidator} from '../helpers/passwordValidator'\nimport {Alert} from \"react-native-web\";\nimport axios from \"axios\";\n\nexport default function LoginScreen({navigation}) {\n    const [email, setEmail] = useState({value: '', error: ''})\n    const [passwordX, setPasswordX] = useState({value: '', error: ''})\n    const [check, setCheck] = useState(false)\n\n    const onLoginPressed = async () => {\n        // const emailError = emailValidator(email.value)\n        // const passwordError = passwordValidator(password.value)\n        // if (passwordError) {\n        //     // setEmail({...email, error: \"\"})\n        //     setPassword({...password, error: passwordError})\n        //     return\n        // }\n        // let pass =JSON.stringify((email.value), (password.value))\n        let user_name = (email.value)\n        let password = (passwordX.value)\n        // let res;\n        // res = await fetch(`http://localhost:3001/users/login`, {\n        //     method: 'POST',\n        //     body: JSON.stringify({user_name, password}),\n        //     headers: {\n        //         'content-type': 'application/json'\n        //     }\n        // });\n        // Alert.alert(\"hi\")\n\n        await fetch(`http://localhost:3001/users/login`, {\n            method: 'POST',\n            body: JSON.stringify({user_name, password}),\n            headers: {\n                'content-type': 'application/json'\n            }\n        })\n            .then(function (response) {\n                return response\n            })\n            .then(response => response.json())\n            .then(({user, token}) => {\n                console.log(token)\n                // alert(token)\n                setTimeout(() => {\n                    localStorage.setItem('id_token', token)\n                })\n                if (token) {\n                    navigation.reset({\n                        index: 0,\n                        routes: [{name: 'Dashboard'}],\n                    })\n                } else {\n                    Alert.alert(\"Invalid Credentials\")\n                    navigation.reset({\n                        index: 0,\n                        routes: [{name: 'LoginScreen'}],\n                    })\n                }\n            })\n\n            .catch(function (error) {\n                console.log(error);\n            });\n\n\n        // console.log(res)\n\n        // if (res.statusCode === 200) {\n        //\n        //     res = res.json()\n        //     localStorage.setItem('id_token', res.token)\n        //     navigation.reset({\n        //         index: 0,\n        //         routes: [{name: 'Dashboard'}],\n        //     })\n        // } else {\n        //     navigation.reset({\n        //         index: 0,\n        //         routes: [{name: 'LoginScreen'}],\n        //     })\n        // }\n\n\n    }\n\n    return (\n        <Background>\n            <BackButton goBack={navigation.goBack}/>\n            <Logo/>\n            <Header>Welcome back.</Header>\n            <TextInput\n                label=\"Email\"\n                returnKeyType=\"next\"\n                value={email.value}\n                onChangeText={(text) => setEmail({value: text, error: ''})}\n                // error={!!email.error}\n                // errorText={email.error}\n                autoCapitalize=\"none\"\n                // autoCompleteType=\"email\"\n                // textContentType=\"emailAddress\"\n                // keyboardType=\"email-address\"\n            />\n            <TextInput\n                label=\"Password\"\n                returnKeyType=\"done\"\n                value={passwordX.value}\n                onChangeText={(text) => setPasswordX({value: text, error: ''})}\n                // error={!!password.error}\n                // errorText={password.error}\n                secureTextEntry\n            />\n            <View style={styles.forgotPassword}>\n                <TouchableOpacity\n                    onPress={() => navigation.navigate('ResetPasswordScreen')}\n                >\n                    <Text style={styles.forgot}>Forgot your password?</Text>\n                </TouchableOpacity>\n            </View>\n            <Button mode=\"contained\" onPress={onLoginPressed}>\n                Login\n            </Button>\n            <View style={styles.row}>\n                <Text>Are you a new user? </Text>\n                <TouchableOpacity onPress={() => navigation.replace('ResetPasswordScreen')}>\n                    <Text style={styles.link}>New User</Text>\n                </TouchableOpacity>\n            </View>\n        </Background>\n    )\n}\n\nconst styles = StyleSheet.create({\n    forgotPassword: {\n        width: '100%',\n        alignItems: 'flex-end',\n        marginBottom: 24,\n    },\n    row: {\n        flexDirection: 'row',\n        marginTop: 4,\n    },\n    forgot: {\n        fontSize: 13,\n        color: theme.colors.secondary,\n    },\n    link: {\n        fontWeight: 'bold',\n        color: theme.colors.primary,\n    },\n})\n"]},"metadata":{},"sourceType":"module"}